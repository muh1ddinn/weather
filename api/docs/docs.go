// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/weather": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This API gets weather data by country name and returns its info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Get weather data by country name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "city_name",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.WeatherResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/weatherget": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "This API gets all weather data with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "weather"
                ],
                "summary": "Get all weather data with filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City name",
                        "name": "city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Weather condition",
                        "name": "condition",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum temperature",
                        "name": "min_temp",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum temperature",
                        "name": "max_temp",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start time (YYYY-MM-DD)",
                        "name": "start_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End time (YYYY-MM-DD)",
                        "name": "end_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetAllWeatherResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Day": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "string"
                },
                "datetime": {
                    "type": "string"
                },
                "datetimeEpoch": {
                    "type": "integer"
                },
                "hours": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.HourlyData"
                    }
                },
                "humidity": {
                    "type": "number"
                },
                "temp": {
                    "type": "number"
                },
                "tempmax": {
                    "type": "number"
                },
                "tempmin": {
                    "type": "number"
                }
            }
        },
        "model.GetAllWeatherResponse": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer"
                },
                "weathers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Weather"
                    }
                }
            }
        },
        "model.HourlyData": {
            "type": "object",
            "properties": {
                "datetime": {
                    "type": "string"
                },
                "datetimeEpoch": {
                    "type": "integer"
                },
                "humidity": {
                    "type": "number"
                },
                "icon": {
                    "type": "string"
                },
                "temp": {
                    "type": "number"
                }
            }
        },
        "model.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "description": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        },
        "model.Weather": {
            "type": "object",
            "properties": {
                "day": {
                    "type": "object",
                    "properties": {
                        "condition": {
                            "type": "string"
                        },
                        "humidity": {
                            "type": "number"
                        },
                        "temperature": {
                            "type": "number"
                        },
                        "temperature_max": {
                            "type": "number"
                        },
                        "temperature_min": {
                            "type": "number"
                        },
                        "time": {
                            "type": "string"
                        }
                    }
                },
                "hour": {
                    "type": "object",
                    "properties": {
                        "condition": {
                            "type": "string"
                        },
                        "humidity": {
                            "type": "number"
                        },
                        "temperature": {
                            "type": "number"
                        },
                        "time": {
                            "type": "string"
                        }
                    }
                },
                "location": {
                    "type": "object",
                    "properties": {
                        "country": {
                            "type": "string"
                        },
                        "id": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "model.WeatherResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "days": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Day"
                    }
                },
                "hours": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.HourlyData"
                    }
                },
                "resolvedAddress": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Swagger Example API",
	Description:      "This is a sample server celler server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
